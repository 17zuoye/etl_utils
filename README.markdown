ETL Architecture
========================
All API are listed in `etl_utils/__init__.py`.

Feature List
------------------------

## Import `etl_utils`

```python
from etl_utils import *
```

## Cache



#### `cpickle_cache` function
```python
cpickle_cache(cache_file_path, generate_data_func)
```
Generate cache data if cache_file_path not exists.


#### `cached_property` decorator
Turn a function into a property.

```python
class Universe:
    @cached_property
    def answer(self):
        return 42

universe = Universe()
assert universe.answer, 42 // True
```

#### `classproperty`
Similar to `cached_property`, but it's a property on a class itself.


## Design Pattern

#### `singleton`
Singleton pattern restricts the instantiation of a class to one object,
see more informations at [Wikipedia](http://en.wikipedia.org/wiki/Singleton_pattern) .

```python
@singleton() # or @singleton(multi_init=True)
class MySingleton(object):

    @cached_property
    def heavy_cpu(self):
        # process ...
        return cached_data

    def another_function(self, params):
        return process(params)

o1 = MySingleton()
o2 = MySingleton()
assert o1, o2 // True
```

Re-import `MySingleton` package will not cause initializing `MySingleton` class twice, so you
 can encapsulate a series of behavior and data into `MySingleton` class.

This function is thread-safe, and is imported https://pypi.python.org/pypi/pysingleton .

## Basic data structure utils

```python
ListUtils.most_common_inspect(list1)
ListUtils.uniq_seqs(seqs, uniq_lambda=None)
StringUtils.merge(*strs)
StringUtils.calculate_text_similarity(text1, text2, inspect=False, similar_rate_baseline=0.0, skip_special_chars=False)
StringUtils.frequence_chars_info(str1, length_lambda=lambda len1 : len1)
MathUtils.plus(obj1)
DictUtils.dict_nested_read(dict1, keys, default_val=None)
DictUtils.add_default_value(dict1, default_value=None)
UnicodeUtils.is_chinese(uchar)
UnicodeUtils.is_number(uchar)
UnicodeUtils.is_alphabet(uchar)
UnicodeUtils.is_other(uchar)
UnicodeUtils.B2Q(uchar)
UnicodeUtils.is_Q(uchar)
UnicodeUtils.Q2B(uchar)
UnicodeUtils.stringQ2B(ustring, convert_strs={})
UnicodeUtils.uniform(ustring)
UnicodeUtils.string2List(ustring)
UnicodeUtils.ljust(str1, width, fillchar=' ')
UnicodeUtils.rjust(str1, width, fillchar=' ')
UnicodeUtils.just_str(self)
UnicodeUtils.read(filename)
HashUtils.hashvalue_with_sorted(str1)
ItertoolsUtils.split_seqs_by_size(seqs1, size1, inspect=False)
```

generated by `generate_api_doc.rb`


## Other utils


License
------------------------
MIT. David Chen @ 17zuoye.
