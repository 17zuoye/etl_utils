{"name":"ETL Utils","tagline":"etl utils","body":"ETL Utils\r\n========================\r\nAll API are listed in `etl_utils/__init__.py`.\r\n\r\nUsage\r\n------------------------\r\n\r\nInstall it.\r\n```bash\r\npip install etl_utils\r\n```\r\n\r\nImport it.\r\n```python\r\nfrom etl_utils import * # increase only 6M memory.\r\n```\r\n\r\nFeature List\r\n------------------------\r\n\r\n## 1. Cache\r\n\r\n#### 1.1. `cpickle_cache` function\r\n```python\r\ncpickle_cache(cache_file_path, generate_data_func)\r\n```\r\nGenerate cache data if `cache_file_path` not exists.\r\n\r\n\r\n#### 1.2. `cached_property` decorator\r\nTurn a function into a property.\r\n\r\n```python\r\nclass Universe:\r\n    @cached_property\r\n    def answer(self):\r\n        return 42\r\n\r\nanswer = Universe().answer # no ()\r\nassert answer, 42 // True\r\n```\r\n\r\n#### 1.3. `classproperty`\r\nSimilar to `cached_property`, but it's a property on a class itself.\r\n\r\n## 2. Terminal\r\n\r\n#### 2.1. `process_notifier`\r\n\r\n```python\r\nfor i1 in process_notifier(iteratable_object, msg=u\"RANGE\"):\r\n    # process(i1)\r\n    time.sleep(0.005)\r\n# Example output is:\r\n#   [pid 17510] RANGE processing 500 records 100% |###################################################################################################################| 166.61 items/s\r\n```\r\n\r\nRequirements about `iteratable_object`:\r\n\r\n1. Iteratable data structure, e.g. list like or dict like object, any orm query, or file object.\r\n2. Exist a way to fetch total count of this `iteratable_object`.\r\n\r\n#### 2.2. `uprint`\r\nPython's default `print` function can only deal with basic `unicode`, but not the Chinese\r\n`unicode` in nested dict or list. So let's transfer this functionality to `uprint`.\r\n\r\nBut remember that `string` type must convert into `unicode` type, or the output will be garbled.\r\n\r\nExample:\r\n```markdown\r\n>>> print({u\"你好\":u\"世界\"})\r\n{u'\\u4f60\\u597d': u'\\u4e16\\u754c'}\r\n>>> from etl_utils import uprint\r\n>>> tmp = uprint({u\"你好\":u\"世界\"})\r\n{u'你好': u'世界'}\r\n>>>\r\n```\r\n\r\n\r\n## 3. Design Pattern\r\n\r\n#### 3.1. `singleton`\r\nSingleton pattern restricts the instantiation of a class to one object,\r\nsee more informations at [Wikipedia](http://en.wikipedia.org/wiki/Singleton_pattern) .\r\n\r\n```python\r\n@singleton() # or @singleton(multi_init=True)\r\nclass MySingleton(object):\r\n\r\n    @cached_property\r\n    def heavy_cpu(self):\r\n        # process ...\r\n        return cached_data\r\n\r\n    def another_function(self, params):\r\n        return process(params)\r\n\r\no1 = MySingleton()\r\no2 = MySingleton()\r\nassert o1, o2 // True\r\n```\r\n\r\nRe-import `MySingleton` package will not cause initializing `MySingleton` class twice, so you\r\n can encapsulate a series of functions and data into `MySingleton` class.\r\n\r\nThis function is thread-safe, and is imported from https://pypi.python.org/pypi/pysingleton .\r\n\r\n## 4. Basic data structure utils\r\n\r\n```python\r\nListUtils.most_common_inspect(list1)\r\nListUtils.uniq_seqs(seqs, uniq_lambda=None)\r\nStringUtils.merge(*strs)\r\nStringUtils.calculate_text_similarity(text1, text2, inspect=False, similar_rate_baseline=0.0, skip_special_chars=False)\r\nStringUtils.frequence_chars_info(str1, length_lambda=lambda len1 : len1)\r\nDictUtils.nested_read(dict1, keys, default_val=None)\r\nDictUtils.add_default_value(dict1, default_value=None)\r\nUnicodeUtils.is_chinese(uchar)\r\nUnicodeUtils.is_number(uchar)\r\nUnicodeUtils.is_alphabet(uchar)\r\nUnicodeUtils.is_other(uchar)\r\nUnicodeUtils.B2Q(uchar)\r\nUnicodeUtils.is_Q(uchar)\r\nUnicodeUtils.Q2B(uchar)\r\nUnicodeUtils.stringQ2B(ustring, convert_strs={})\r\nUnicodeUtils.uniform(ustring)\r\nUnicodeUtils.string2List(ustring)\r\nUnicodeUtils.ljust(str1, width, fillchar=' ')\r\nUnicodeUtils.rjust(str1, width, fillchar=' ')\r\nUnicodeUtils.just_str(self)\r\nUnicodeUtils.read(filename)\r\nHashUtils.hashvalue_with_sorted(str1)\r\nItertoolsUtils.split_seqs_by_size(seqs1, size1, inspect=False)\r\nJsonUtils.unicode_dump(item1)\r\n```\r\n\r\ngenerated by `ruby generate_api_doc.rb`\r\n\r\n\r\n## 5. LazyData\r\nLoad data only when needed.\r\n\r\n```python\r\nfrom etl_utils import ld\r\nld.en_us_dict\r\nld.two_length_words\r\nld.regular_words\r\nld.lemmatize(word1)\r\nld.tagged_words__dict\r\nld.jieba\r\n\r\nfrom etl_utils import regexp\r\nregexp.alphabet\r\nregexp.word\r\nregexp.upper\r\nregexp.object_id\r\nregexp.special_chars\r\n```\r\n\r\n## 6. Memory\r\n\r\n```python\r\n# `slots_with_pickle` decorator adding `__slots__` to these classes can\r\n# dramatically reduce the memory footprint, and improve execution speed\r\n# by eliminating the instance dictionary.\r\n# And it also possible to pickle/unpickle objects.\r\n\r\n@slots_with_pickle('attr_a', 'attr_b', 'attr_c')\r\nclass Slots(object):\r\n    def __init__(self):\r\n        attr_a = 'a'\r\n        attr_b = 'b'\r\n        attr_c = 'c'\r\n```\r\n\r\n## 7. Other utils\r\n\r\n```python\r\ncalculate_entropy(feature_with_count_dict)\r\n\r\nis_nltk_word(str1) # is valid English word\r\nextract_words(sentence)\r\n\r\nItemIncrementIdDict # Assign an auto increment integer to item, e.g. an object_id\r\nItemsGroupAndIndexes # group result\r\n\r\nMarkObjectIds # mark processed objects group\r\n\r\n# Sequentially process lambda in `lambdas`, return the first one with no exception.\r\nset_default_value(lambdas, msg=u\"\")\r\n```\r\n\r\nRun tests\r\n------------------------\r\n```bash\r\npython tests/test.py\r\n```\r\n\r\n\r\nLicense\r\n------------------------\r\nMIT. David Chen @ 17zuoye.\r\n","google":"UA-57207964-1","note":"Don't delete this file! It's used internally to help with page regeneration."}